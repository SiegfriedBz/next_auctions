import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { setI18n } from "@lingui/react/server";
import type { FC, PropsWithChildren } from "react";
import {
  allMessages,
  getI18nInstance,
  I18nLocales,
  I18nProvider,
  type LangParam,
  withI18n,
} from "@/i18n";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export async function generateStaticParams() {
  return I18nLocales.map((lang: string) => ({ lang }));
}

type Props = {
  params: Promise<LangParam>;
};

const Layout: FC<PropsWithChildren<Props>> = async (props) => {
  const { params, children } = props;
  const { lang } = await params;

  const i18n = getI18nInstance(lang); // get a ready-made i18n instance for the given locale
  setI18n(i18n); // make it available server-side for the current request

  return (
    <html lang={lang}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <I18nProvider lang={lang} messages={allMessages[lang]}>
          {children}
        </I18nProvider>
      </body>
    </html>
  );
};

export default withI18n(Layout);
